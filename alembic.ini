# alembic.ini

# Alembic 설정 파일입니다.
# 이 파일은 Alembic 마이그레이션 도구의 동작 방식을 제어합니다.

[alembic]
# 마이그레이션 스크립트가 저장될 디렉토리 경로
# wims/
# └── backend/
#     ├── alembic.ini  # <-- alembic 설정 파일
#     ├── migrations/
#     │   └── versions/    # <-- 마이그레이션 스크립트 파일이 저장될 폴더
#     │       ├── __init__.py
#     │       └── <revision_id>_<message>.py
#     └── (다른 프로젝트 파일들)
script_location = migrations

# 마이그레이션 환경 스크립트 (env.py)의 경로
# 이 파일에서 데이터베이스 연결 및 마이그레이션 컨텍스트가 설정됩니다.
# file_template = %%(rev)s_%%(head)s
file_template = %%(rev)s_%%(slug)s
# 마이그레이션 파일 이름 템플릿: revision_id_head_name.py
# 예: 3a2c4d5f_empty_database.py
# (rev)s: 리비전 ID (고유 식별자)
# (head)s: 현재 최신 리비전의 ID (선택 사항)
# (utcnow)s: UTC 타임스탬프 (선택 사항, 날짜 기반 파일명에 유용)

# 마이그레이션 스크립트의 기본 템플릿
# `generic.py.mako`는 SQLModel과 비동기 지원을 위해 커스텀 템플릿을 사용하도록
# `env.py`에서 설정할 것입니다.
# (이 설정은 `env.py`에서 재정의될 수 있습니다)
# template_directory = %(here)s/templates

# `env.py` 파일의 Python 경로를 지정합니다.
# `app.migrations.env`는 `app/migrations/env.py` 파일을 가리킵니다.
# Alembic이 마이그레이션 작업을 수행하기 전에 이 모듈을 로드합니다.
# env.py가 import app.core.config 등을 할 수 있도록 python_path 설정이 중요합니다.
# python_path = .  # env.py에서 실행중 경로 자동 추가


# 데이터베이스 연결 URL (여기서는 직접 설정하지 않고, env.py에서 .env 파일을 통해 로드)
sqlalchemy.url = postgresql+asyncpg://wims:wims1234@localhost:5432/wims_dbv1
# 이 주석 처리된 부분은 env.py에서 app.core.config.settings.DATABASE_URL을 통해 동적으로 설정됩니다.

# SQL 덤프 파일 경로 (데이터베이스 초기 스키마 생성에 사용될 수 있음)
# Alembic은 이 파일을 직접 사용하지 않지만, env.py에서 활용될 수 있습니다.
# 예를 들어, 최초 마이그레이션 생성 시 `create_all` 대신 이 덤프를 기반으로 스키마를 로드할 때.
# sql_dump_file = wims_v250529_0.sql
interpolation = none


[loggers]
keys = root,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_alembic]
level = INFO
handlers = console
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S

[post_write_hooks]
# 마이그레이션 스크립트 파일이 생성된 후 실행될 추가 명령
# 예: Black이나 Ruff 같은 코드 포매터로 자동으로 포매팅
# hooks = black, ruff

# hooks.black.entrypoint = black
# hooks.black.args = %(file)s

# hooks.ruff.entrypoint = ruff check --fix
# hooks.ruff.args = %(file)s

[post_write_hooks.mako]
# Mako 템플릿 엔진을 사용하여 마이그레이션 스크립트를 생성할 때 사용되는 훅
# Alembic이 기본적으로 사용하는 템플릿 엔진입니다.
# 여기서는 기본 설정을 따르거나, 필요에 따라 커스텀할 수 있습니다.


# 이 파일의 모든 설정은 `env.py`에서 Python 코드를 통해 동적으로 재정의될 수 있습니다.
# 특히 `sqlalchemy.url`은 `env.py`에서 `.env` 파일을 통해 로드되는 `DATABASE_URL`을 사용하도록 설정할 것입니다.